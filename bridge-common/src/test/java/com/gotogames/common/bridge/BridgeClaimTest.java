package com.gotogames.common.bridge;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import junit.framework.TestCase;
import com.gotogames.common.bridge.BridgeCard;
import com.gotogames.common.bridge.GameClaimThomas;

public class BridgeClaimTest extends TestCase {

    public void testgetNbWinningCardColor() {
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));
		j1.add(BridgeCard.createCard("QS",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j2.add(BridgeCard.createCard("JS",'S'));
		j2.add(BridgeCard.createCard("TS",'S'));
		j2.add(BridgeCard.createCard("9S",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		
		
		assertTrue(GameClaimThomas.getNbWinningCardColor(j1,j2) == 3);
		
		j2.remove(0);
		
		assertTrue(GameClaimThomas.getNbWinningCardColor(j1,j2) == 4);
	}

	public void testgetNbSubmissiveCardColor() {
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));
		j1.add(BridgeCard.createCard("QS",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j2.add(BridgeCard.createCard("JS",'S'));
		j2.add(BridgeCard.createCard("TS",'S'));
		j2.add(BridgeCard.createCard("9S",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		
		
		assertTrue(GameClaimThomas.getNbSubmissiveCardColor(j1,j2) == 1);
		
		j1.add(3,BridgeCard.createCard("7S",'S'));
		j1.add(4,BridgeCard.createCard("5S",'S'));
		
		assertTrue(GameClaimThomas.getNbSubmissiveCardColor(j1,j2) == 3);
	}

	public void testgetNbImmediateLoserColor() {
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		List<BridgeCard> j3 = new ArrayList<BridgeCard>();
		int n1 = 0;
		int n2 = 0;
		
		j1.add(BridgeCard.createCard("QS",'S'));
		//j1.add(BridgeCard.createCard("9S",'S'));
		j1.add(BridgeCard.createCard("3S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j2.add(BridgeCard.createCard("JS",'S'));
		j2.add(BridgeCard.createCard("4S",'S'));

		
		j3.add(BridgeCard.createCard("AS",'S'));
		j3.add(BridgeCard.createCard("KS",'S'));
		j3.add(BridgeCard.createCard("8S",'S'));
		j3.add(BridgeCard.createCard("7S",'S'));
		j3.add(BridgeCard.createCard("6S",'S'));
			
		assertTrue(GameClaimThomas.getNbImmediateLoserColor(j1,n1,j2,n2,j3) == 5);
		
		n1 = 1;
		assertTrue(GameClaimThomas.getNbImmediateLoserColor(j1,n1,j2,n2,j3) == 3);
		
		
		j1.add(BridgeCard.createCard("9S",'S'));
		assertTrue(GameClaimThomas.getNbImmediateLoserColor(j1,n1,j2,n2,j3) == 2);
			
	}
	
	public void testgetNbUselessCard()
	{
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		List<BridgeCard> j3 = new ArrayList<BridgeCard>();

		
		j1.add(BridgeCard.createCard("4S",'S'));
		j1.add(BridgeCard.createCard("3S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j2.add(BridgeCard.createCard("JS",'S'));
		j2.add(BridgeCard.createCard("TS",'S'));
		j2.add(BridgeCard.createCard("9S",'S'));

		
		j3.add(BridgeCard.createCard("AS",'S'));
		j3.add(BridgeCard.createCard("KS",'S'));
		j3.add(BridgeCard.createCard("6S",'S'));
			
		int test = 0;

		test = GameClaimThomas.getNbUselessCard(j1,j2,j3);
		assertTrue( test == 3);
		
		j1.add(BridgeCard.createCard("8S", 'S'));
		
		test = GameClaimThomas.getNbUselessCard(j1,j2,j3);
		assertTrue( test == 4);
		
		j3.add(BridgeCard.createCard("QS", 'S'));
		
		test = GameClaimThomas.getNbUselessCard(j1,j2,j3);
		assertTrue( test == 0);
	}

	public void testgetBlocage()
	{
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		List<BridgeCard> j3 = new ArrayList<BridgeCard>();

		
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("3S",'S'));
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));

		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_0);
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("3S",'S'));		
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("QS",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_1_B);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("QS",'S'));		
		
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("JS",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		j3.add(BridgeCard.createCard("8S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_1_A);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));		
		
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("7S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_2_A);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j2.add(BridgeCard.createCard("AS",'S'));
		j2.add(BridgeCard.createCard("KS",'S'));		
		
		j1.add(BridgeCard.createCard("8S",'S'));
		j1.add(BridgeCard.createCard("7S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_2_B);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("QS",'S'));		
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_3_A);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j2.add(BridgeCard.createCard("AS",'S'));
		j2.add(BridgeCard.createCard("QS",'S'));		
		
		j1.add(BridgeCard.createCard("KS",'S'));
		j1.add(BridgeCard.createCard("8S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_3_B);
	
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));		
		
		j2.add(BridgeCard.createCard("QS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_4_A);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j2.add(BridgeCard.createCard("AS",'S'));
		j2.add(BridgeCard.createCard("KS",'S'));		
		
		j1.add(BridgeCard.createCard("QS",'S'));
		j1.add(BridgeCard.createCard("8S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getBlocage(j1, j2, j3) == Blocage._Niveau_4_B);
	}
	
	public void testgetNbTricksColor()
	{
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		List<BridgeCard> j3 = new ArrayList<BridgeCard>();

		
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("3S",'S'));
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));

		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 2);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("3S",'S'));
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("QS",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));

		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 3);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("QS",'S'));
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("JS",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));

		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		j3.add(BridgeCard.createCard("8S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 3);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("JS",'S'));
		j1.add(BridgeCard.createCard("7S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j2.add(BridgeCard.createCard("AS",'S'));
		j2.add(BridgeCard.createCard("KS",'S'));

		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 2);
	}

	public void testgetNbTricksUnlockableColor()
	{
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		List<BridgeCard> j3 = new ArrayList<BridgeCard>();

		
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("3S",'S'));
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));

		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksUnlockableColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 0);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("QS",'S'));
		
		j2.add(BridgeCard.createCard("KS",'S'));
		j2.add(BridgeCard.createCard("JS",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));

		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		j3.add(BridgeCard.createCard("8S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksUnlockableColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 0);
		
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("JS",'S'));
		j1.add(BridgeCard.createCard("7S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j2.add(BridgeCard.createCard("AS",'S'));
		j2.add(BridgeCard.createCard("KS",'S'));

		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksUnlockableColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 1);
		
		j1.clear();
		j2.clear();
		j3.clear();
		j1.add(BridgeCard.createCard("JS",'S'));
		j1.add(BridgeCard.createCard("7S",'S'));
		j1.add(BridgeCard.createCard("6S",'S'));
		j1.add(BridgeCard.createCard("5S",'S'));
		j1.add(BridgeCard.createCard("2S",'S'));
		
		j2.add(BridgeCard.createCard("AS",'S'));
		j2.add(BridgeCard.createCard("KS",'S'));

		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		
		assertTrue( GameClaimThomas.getNbTricksUnlockableColor(j1, j2, j3,GameClaimThomas.getBlocage(j1, j2, j3)) == 3);
	}

	public void testupdateTrump()
	{
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		
		
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));
		
		j2.add(BridgeCard.createCard("QS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));

		assertTrue( j1.size() == 2);
		assertTrue( j2.size() == 3);
		try {
			GameClaimThomas.updateTrump(j1, j2);
		} catch (GameClaimException e) {
			e.printStackTrace();
			assertFalse(false);
		}
		assertTrue( j1.size() == 1);
		assertTrue( j2.size() == 2);
		try {
			GameClaimThomas.updateTrump(j1, j2);
		} catch (GameClaimException e) {
			e.printStackTrace();
			assertFalse(false);
		}
		assertTrue( j1.size() == 0);
		assertTrue( j2.size() == 1);
		
	}

	public void testremoveTrumps()
	{
		List<BridgeCard> j1 = new ArrayList<BridgeCard>();
		List<BridgeCard> j2 = new ArrayList<BridgeCard>();
		List<BridgeCard> j3 = new ArrayList<BridgeCard>();
		
		
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));
		j1.add(BridgeCard.createCard("7S",'S'));
		
		j2.add(BridgeCard.createCard("QS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));
		
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));
		j3.add(BridgeCard.createCard("6S",'S'));

		assertTrue( j1.size() == 3);
		assertTrue( j2.size() == 3);
		assertTrue( j3.size() == 3);
		GameClaimThomas.removeTrumps(j1, j2, j3);
		assertTrue( j1.size() == 0);
		assertTrue( j2.size() == 0);
		assertTrue( j3.size() == 0);
		
		j1.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));
		j1.add(BridgeCard.createCard("7S",'S'));
		j2.clear();
		j2.add(BridgeCard.createCard("QS",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));
		j3.clear();
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));

		assertTrue( j1.size() == 3);
		assertTrue( j2.size() == 3);
		assertTrue( j3.size() == 2);
		GameClaimThomas.removeTrumps(j1, j2, j3);
		assertTrue( j1.size() == 1);
		assertTrue( j2.size() == 1);
		assertTrue( j3.size() == 0);
		
		
		j1.clear();
		j1.add(BridgeCard.createCard("AS",'S'));
		j1.add(BridgeCard.createCard("KS",'S'));
		j1.add(BridgeCard.createCard("7S",'S'));
		j2.clear();
		j2.add(BridgeCard.createCard("5S",'S'));
		j2.add(BridgeCard.createCard("8S",'S'));
		j2.add(BridgeCard.createCard("2S",'S'));
		j3.clear();
		j3.add(BridgeCard.createCard("JS",'S'));
		j3.add(BridgeCard.createCard("TS",'S'));
		j3.add(BridgeCard.createCard("9S",'S'));

		assertTrue( j1.size() == 3);
		assertTrue( j2.size() == 3);
		assertTrue( j3.size() == 3);
		GameClaimThomas.removeTrumps(j1, j2, j3);
		assertTrue( j1.size() == 1);
		assertTrue( j2.size() == 1);
		assertTrue( j3.size() == 1);

		
	}


	public void testClaim() {
		String[] testDataNoClaim = new String[] {
		/*"DEAL=NNSWNSNNNSNESNSESENEWWSEWSWNWWEWWEESSSWWNNEEWNWNNEEESS;GAME=1CPA4NPA5HPA6CPAPAPAQSKS7S2SAC3C4CJCAS5S6S4S9HQHAH4H8STS2C8DTHKH6C8H9SJS5C2HJH3H5D7H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=WAESNSNSSSWWWWENSWNWEWSWEESSESWNESNWENSSNENEWNNWENWEEN;GAME=PAPA1S2H2S4HPAPAPA5SAS4S3CJH2H3H9H2DJDKD6D7H4HAH6H5HTHQHTCAD4D5D7D3D8D8HQD4C2C9CJCTD3S2S9D8S6S9SKH;CONV=0001010200010101010101010101010101010101010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=NLENENEWESSNNWSEESSNNSEWEWESWNNWWWNWNNSNESSNSEWWWEWSSE;GAME=PA1D1SPA2HPA2NPA3HPAPAPA4C9CKC3CQD6DKDADQH7HKHAH2CAC7C5CKS8S4SAS6CTC5HJCTD7DJD4D8C2S7SQCJH2D3S2HTH3D5S6H8H6S5D9H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=WLNSWSNWESSNESESSNNSSSWNEWWENWNNSNEENEEWNEEWWWNWEWESSW;GAME=1SPA2CPA2SPA4SPAPAPA4DJD2D9D2SQSAS7SQD5DAD3DQH6H3HAH2CAC3C4C8H5CKH2HKDTD3S6DJH7D7C4H8CKC6S6C5SJC9SKS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=ENWNEEESWSSSNESNESEWSNEEWSWNWWWNWEWSNWSNESWWENSNENNSNE;GAME=PAPAPA1SPA2CPA2SPA4SPAPAPATD4D6DAD6S5SQS4S2S3SKSASAH9H6H5H7HQH2HTH7S8CJS9SKH3D7D3HQC4C7C2C3C5CAC4H9C8H2DKC5DQDKD8D;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=EENNWWWNNWESSWSNNWNESSESNEEEWWNENWEWWNSWSEEWSENSSENESS;GAME=1S1N2HPAPA2NPAPAPATH4H8HQH5S4SJSQS5HAH2H6HAS4C7S6SQCKC2CTCKHJH2S7D3H3C6D8D7H7C3STD9H8CTS8S4D2D9D9S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=WAWSEWNEWEWWNSESNNEWNWESESNEWSENWWESSSWSSNEENSNNWNEWNS;GAME=PAPAPA1HPA1SX13HPA3SPA3NPA4SPAPAPA4HAH7H5HKH6H3D8H6SQSKS4S2S3SAS9S3H2H7SJSAD2D8D4DAC3C2CQC5DQD6D7DKC5C6C4C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=ELWSENNWWSESEESWSEWEWWSNSSWESNSSWWEWWNENSNENENSENWNENN;GAME=1CPAPA3SPAPAPAKCAC2C5C7STSJSQSQH2H7HKHAS5S3C7CKS3S3D8C6CQC9C2DAD9D5DTD4DJDKD2S3H8HAH6HQD7DJH6DJC9H4S4C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		*/
		"DEAL=ENWWEWWSSNNSWSESSSWSNNESWENSWNNEEWSWNNEEEEEEENWNNWNWSS;GAME=1H2DPAPA2H3C3H4DPAPAPA2H3HQH8H5SAS7S6SAD5D7D9D2DJDKDQDTC4C7CQC6C9CAC8C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=WLNSWSNWESSNESESSNNSSSWNEWWENWNNSNEENEEWNEEWWWNWEWESSW;GAME=1SPA2CPA2SPA4SPAPAPA4DJD2D9D2SQSAS7SKD5DAD3DQH6H3HAH2H8H3CKH4C2CAC5CJH6D7C7H8CTC6S6CQDTDQC7D5SJC3SKS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=NEESEESESESNSWWNNENEEWWWWSESNESSENNNWSSNENWWSWNNWNSWEW;GAME=PAPA1C1SPA1NPA3SPA3NPAPAPA6CKCJC2C8D2D4DQD3CAC3D4C3S2SKS5S6DAD9D5DQC4S2H7CTCTH7S5C8C6S8S9C7DJSTD7HASTSKD4H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=NAEEESNNSWENWSSEESSWENWEWNSWSWWNSENNWNSWSNWNENESWNSEEW;GAME=PAPA1CX1PA1S2HPA3CPAPAPAAS2S7S8S3S4SQSJS7H2HKH5H3H8H4C6HTD4DAD8D4H9H2CQH2D5D6DQD6C3CKC9CACQC7CTC;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=SAWNWSNNSWSWNENNSWSEEENWEEENWSEENSWNSNNSSWEWWENWESSSEW;GAME=PAPA1C1D1H1S2H3HX13NX14S5HPAPAPATDADKD3D6H5HAH8HKH2H9H4H5C4CQCKCQD5D4D2DKSTS2S7SJD3H4S9D8C9CAC6D3C7DTCJC2C6C3SQS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=ENNSSSSSEEEWESNNSEENESNNSEWNWWENWNWNWWSWENEEWWWWESNSSN;GAME=PAPAPA1DPA2C3HPAPAPAAC8C3CJCAD4D3DKDAS3STS5SJS4SKS6SQS7S2S9SQH2H5HAH4H4CJH7HKH9H9C5C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=ENWESNENNNWSENNEWESSWSNSWSWEEESNWWWNSSWNWENNESEWWEESNS;GAME=PAPAPA1CPA1D1H2CPA2NPA3NPAPAPA7H5H3HTHJC2C5CQC2H4HAH9H7D9DAD5D6C4CTCKCAC3CJH6H9C2S6D3D7C2D8D8S8C4DTD9SKH5SQD8HKS7S6SJD;CONV=0001010200010101010101010101010101010101010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=WNEEEWSWSEEENNWSNNSNEWNSWESSSWNSWSNNWWWSNESSWNENEENWEW;GAME=1HPA1SPA1NPA2SPAPAPA8CACQC2CQS6S2S4S5S8SKS3S9S2HASJSQHAH7D5H6DQDKD8D6C5CKC3C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=SLWNSNWWENWWSEEESESESNNSSSENWWESWSNENWESSWEENNWNNNEWWS;GAME=1DPAPA1N2DPAPAPAKS5S3SAS3D2C9DKDAC4C6C3CKCQC7C5C2D5DTC8D8H9HAH6H7D2SAD4D6S4STD7SQDQS8S6DJD2H9S8CKH3HTH4H;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=NNSESEENWENWEESNSNNSWWNSNSWSNWESSWWNNWENSWENSEWSNWEEEW;GAME=PA1SX13SPA4SPAPAPAAD7D2D3S6S5STS9SAS4SQS8SKD5D4H3DJC7C3CAC6D8D9DKSQC2C8CTC5C4C3H2H9C5H7H9HKCTD8H4D6C6HJHJD;CONV=0100010300000001010001000101010101010101010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=NAWWWNEEEWSNEENESSWNWSNWSWEWWSSSSWNESSWENNENNNENENSSEW;GAME=PA1CPA1D1S1NPA2NPAPAPA3H2HAH9H6S3SJSAS2C5CKCTC2D3DQD9D3CJCQC4DKD8D5D6D7C4H4CAC2SKSQS7D8C5H9C4SAD5S7SJDTD8S9S6H;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=WLSNWSWNSEWWSWSNWSNWWEWSSNENWSWNSNSNEENSNEWENWEENEESEE;GAME=PA1H1S4HPAPA4S5HPAPAPAASQS6S5SKD4D7DAD9S2S3H3SKH4H5HTH6H2HAHJH3C9CQCKCJC7C4SACJD3D2D8DTD6D5D7S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		//"DEAL=SAEWWSSESSNSSSWENWSNSNESWWWNWEEWWNEENWEENENNESSSNWNENW;GAME=3CPAPAPAKDAD9D5DTC7C5CACQD3D2D7DJD6D4HTD6HAH3H6S7H8H6C5HKC4C8D2CQC3CTH9H7STSKS2S3S5S8SAS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=SEWWSNENWSNSWSSNWSWWNSENESSENWSSEEESNENEEESWNEWWNNENWW;GAME=1C1SPA4SPAPAPA5C6CKC3C3SAS5S2S3H2HKH4HAH5H3DTH6H9H4SQH2C7C6S4CJH4D8C9S2DAD8D6D7H9C5DTSQSJSJCKSQCTC8HAC;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=SNWNWWNESSNNWSWESSSESEWENSNWENNNNESWWNNSWEWESEEESENWWS;GAME=1DX11H3SPA3NPAPAPAQH2H8HTH3H7HKHAHQSJS2S5SKS6C4SAS8CQC3C7CACTC2D9CADJD6D3D3SJCTS9S6SKC2C4H7S4D5C5H8S5D4C6H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=EASNSNWWEEEWNNWSNNSWEEWSESSNNWWSWESENESSEENNWWENNWEWSS;GAME=PA1NPA2CPA2DPA2NPA3HPA3SPA3NPAPAPA6CKC8C2C3D7DKD9D2D6DAD8D4DJDQD6HTD6S3S9C5D4H4STCKH3H2HAH2SAS5S8SKSTS9S7SQH7CTH7H4CJCQC9H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		//"DEAL=ELWWEEWSSSEEEWSNWESWWWENWWESNNSNWEWNEESSWNSNNNSNESNSNE;GAME=PA1N2D4SPAPAPA4DAD7D2D3S6CKS9S2SAS7S2CKD5D3DTDQCAC3C2H7CKC4S5C3H7HQH6H8C6D5S4C5HTHKHAH8H9HJH4H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=NLNENSNWNSESSSNEWSESENWSNWWWENWEEWESNEWWSENSWNEWEWSSNN;GAME=1CPA5CPAPAPA2D4DQD8DADJD5D6DKH3H2HAH5C7CAC3C2CTCKC3DQS5S3S2SJS8S6S7S4STSKS9SAS5H9H9DTH6HQC4H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		//"DEAL=NLNNWWSSEEWSSWWSENNSESSSWEWSSNENEWNENNEWWESESNNWNWNWEE;GAME=PAPAPA2NPA3C3DPAPAX1PAPAPAAH3H6H2HKH5H4H2D6DJD4D7DAC2C9C6CKC3C8C7CKD5D3DADTD7H6SQDAS3S8S7SKS5STS9S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		//"DEAL=SENSSSWSWENWWSWNWSSSNNWNEWNEWEWNENESWNWSWESEEESNESENEN;GAME=PA1HPA1SPA2C2D4HPAPAPA2DAD4D3D9C3CAC2CJCTCJDKC5D9DTD3H2STS4H8SQDKD8H6D6H9HQH5HAH7H4SKHQCJH5S4C7D6S3S6C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=NASNWESNESESNWWSESNSNWENNSSWWWWWWNNEENEWSNSESESNEWWNEE;GAME=PAPAPA1HPA2HPA2NPA3NPA4HPAPAPAJD3D4DAD2H8H9HAHKD8D5D9D2CAC3C5CJSQSKS3STH5SKH7H5HJHQH7SAS2DTS2S9S6D4C8S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=SLEEWSWEWNWWNNNSNNWSESEWSSNSESNWEESEWSNSWNENWSNWEEENWS;GAME=1DPA1SPA2DPA3NPAPAPA7H3HAH4HJCAC2C5CKC3C6S6CQC7C2D4CQH2H8H5HKD9D6D5D3D7DADTD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		//"DEAL=ELWEENNEESWNSWENSWSENSWWWNNENSESSSNNESESWEWENNWNESWWWS;GAME=PA1H1SPA3CPA4SPAPAPA2H4H7HAHTDQDAD3D2SAS3S5SKHQS8HTHJDKD6D5D9HQH3H2C4STSKS6S4D7D9S8D3C9CKC5CJS8S4CQCTC6CAC5H;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-W",
		//"DEAL=SENEEWNNWEESNWESSNNNWEESNSSEWSWNNWEWEENESSWSWWSNWSSEWN;GAME=1SPA1NX12D2H3D4HPAPAPAASQS2S3S6DAD2D7D8DQD7H5D2H6H8HAHJC5C7CAC9DTD4H4D9H5HTH3HKH3D6SQHTC7SKC2C8CQC3C4S;CONV=0001010200010101010101010101010101010101010100;OPTIONS=00000100;TYPE=2;1-E",
		//"DEAL=WANWWWESWSEWSENWSNNENSWSNWENSSWEWESWNENNSNNSWEEEENSWES;GAME=PA1DPA1HPA1NPA2NPA3NPAPAPA7S4SQS2S5S3S6SJS3D2DJDKD8SAS3CTSTDQDAD6DKH5H2H4HQH7H3H6HTHJHAH9H8H4C2C6C8D9D4DKS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=NEEENWWNEENNSESSWSWESNEENNWSSSEWSWNNWWSNSNSNWEWNWSEWEE;GAME=PAPA1HPA2HX1PA2SPA3SPAPAPA8H4HAH5HAC5C7C2CAD3D8D6D2DKDJD9D6C4CKCQC3C3S5STC7S8SJSTSAS4DQS2S8C7D9SJC5DQDTD2H9H6S3H7H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=ENWESNENNNWSENNEWESSWSNSWSWEEESNWWWNSSWNWENNESEWWEESNS;GAME=PAPAPA1CPA1D1H2CPAPAPA3H4HAH5H7HKH2HTH3S5SQS9S4C2CKC3C5CQCJCTC2D5DJD9DQH9H4DJH6H7C2S6DAC6C8D3DKS7S6S8S4SJSAS8H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=ELEENWEESWSWNESWSNNENESENWWSSNWWWSESWENWNSNWSSWESNNEEN;GAME=PAPAPA1DPA1NPAPAPA5H3HJH2H2C8C9CQC3SQS2S7S3CTCJC4CKD4D6DADAC5C5D6C5S4STSKSKC3D2DQH7C6S4HJS8H7H6HAHAS8S9STH;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=EENWNENNNEEENSEWSESWSESWNNSSWESSNWNEEEWSEWNNWWEWSWNWSS;GAME=PA2CPA2D2H3CPA5CX15DPA6CX16DPAPAX1PAPAPA7SAS6S3S3D2DJD4DQD8D5D6D4S5CKS2SKC3C2CACAH4H2H6HJHKH7H8HADTD6C3HKD5S4C9C7D8S7C9H9DTS8CTH;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=EANWWSNWSESESEESEEEWSNSWENESEWESSESWNNNNSWNNNWEWSNWNWW;GAME=1D1H1S3HPAPA3SPA4SPAPAPAKH2H5H3HTH4HAH9H9SJSQS7SJH7H6H2SKS5S3D5CAS3S9C2D6D8DJDAD8H8SQH4D4C2CKC8CKD7DTDQD5D9D6S6C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=SEESSEWWEWNESWSSWNSNNWNENEEWSEESEENWNESWSWESNWNSWWNNNS;GAME=1NPA2HPA2SPA2NPA3SPA4SPAPAPA7CTCJCQCAS6S5S3S4S2SJS3H9DTD2D3D4H5HKH8HTSQS2C8STHJHQH9HAH9S4D6HKC6D5CAC2H6C7D7HKD5D8DJD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=NNEWWSWWEEWNWSSWESWNNSESNNESWNNSNEWSESNNSWSEWNNWENEEES;GAME=PAPA2NPA3DPA3HPA3NPAPAPA6CJC2CACAH8H3H7HJH2H4HTH5H5DKH8CQH4S9H3C6H9S4D4C6SJSAS2SKC7C7S9CAD2D6D3D8D5SQD9D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		//"DEAL=WNEEEWSWSEEENNWSNNSNEWNSWESSSWNSWSNNWWWSNESSWNENEENWEW;GAME=1HPA1S2DX12H3SPAPAPAAD8D6D7DKDJD3DQDTD5S4D2CAS6S2S3SQS8S7S4SACQC3C6CQHAHTS2HKS2D5CJS9C8C7CKC;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=ENWEWWNSSWSSWENWSSWNNEENWSWWESNNSESEEWESWWNSNENNEENNES;GAME=PAPA1DPA1HPA2CPA2HPA3HPAPAPAJC2CAC3C6CKC7C4C2H3HAH5HJH4HQHKHAS2S7S6S4S2DJSKSTH6H5D3S9H8HJD5S8D3DKD6D5C7D7H8C9D4DADTD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=WLNNNEWSENENWENWEWNSSWEWEESNSEWNWNNSWESSSSEWNWSESWSWEN;GAME=PA1CPA1HPA2CPA3NPAPAPA4S5SKS2SQDKD4D5DAH4H5HJHKH6H7H3HQHTH8H3D9H6C2C8S2H6S3C3S7CQCAC5CAD9D6D2DAS8C7STS4CTC7D8D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=WAWWNSSESEWNNEEESEEENWENWSWWSEEWWWNSWNNSSWSWSNEENSNSNN;GAME=PA1SPA4SPAPAPAAC5C2C4C2D3DJD7DADTD4DQD3CJCKC6C7C8CTCQC6S8SQS4S3S2SAS7SQH3H2H5HJH4H9H6H8H5DKH7H;CONV=0001010200010101010101010101010101010101010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=SENEEWNNWEESNWESSNNNWEESNSSEWSWNNWEWEENESSWSWWSNWSSEWN;GAME=PAPAPA1CPA1SPA2CPAPAPAAH2H5HJHQD7D6DADQS2S3SASQHKH3H4H4CJCKC7C5C6CAC2D9D3D8C4DKS8S8DTS7H6H8H4S3C7S9H2CTHTD5SQC;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=NNEWWSWWEEWNWSSWESWNNSESNNESWNNSNEWSESNNSWSEWNNWENEEES;GAME=PAPA2NPA3DPA3HPA3NPAPAPA6CJC2CACAH8H3H7HJH2H4HTH5H5DKH8CQH4S9H3C6H9S4D4C6SJSAS2SKC7C7S9CAD2D6D3D8D5SQD9D7DKDTD8S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=ELWWEEEENNSNSSNSEENWNSEWWSNSWWSWNWNNNESWWWESEENEWSNESS;GAME=PA2NPA3CPA3NPA4HPA6NX1PAPAX2PAPAPAAH6HJH4HKH8H7CQHJD5D3DQDKC3C8C4CQC2C9C5CTC2HAC6CJC4D2D3H7S3SKS2SAD6D7D9D8DTDKD5SJS6S4S9S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=SNWWNEEEENSSSSNSENEEWWSWWNNWENWSNWEEWEEESWNWSWNSSNSNNS;GAME=1NPA2HX12S3H4SPAPAPA4H3HJHAHAS2S3S2H5S4SKS8HQS9H8S6SAC7CTC3C4C5CJC2CQC7D9C6CKC8D6H8C5H7H7SQHKD3D2DADJDQD5D9D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=NANSNNWWSWNEENNEEESWSNWWEWSSSEESNWWNWSWSSNEEWEEWSNNNES;GAME=PAPA1HPA1SPA2DPA2NPA4NPA5DPA5HPAPAPA6CKCJC3C8D4DKD6DAD9D2C2D7DTD6H3DTS3S9S8S2S4SAS5S5DQD9HJDACQC8C7CTC3H5H9C2H7H4C4HTH5C6SJH;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=WLWSWSNEWENWEESESWSWNESSWWNEEWEWNWNEWSSESSSESNNWNNNNEN;GAME=PA3SX14SPAPAPAKCAC4C6C2S8S9SKSQC3C2CTC7C5CJC6SAS4S3S8C6H4HJH7H3DJDKDAD2D9DQD7D4D7S8D5D8H2HQH3H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=NASESWNWNNNNESSEEWSWESWWWEENSSEWNNEWSNSSEWESNWNWWSENEN;GAME=1C1D1H2DX1PA3CPA3HPA4HPAPAPAJDAD2D5D6H4HTH9HKH5H7HAH8H2H7CJHJC3C2C5CTCQCAC6DKC6S6C3D4C2S9C7D8CQD8D8SAS3S4S9S5SJSTS4D;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=WLESSSWNENSWEWSENSSWSENSWWSWWEWNNENSNEWEWEENSENWNWENSN;GAME=1NPAPAX1PAPAPA4S2SKS8S5STSQS3SAS6S3C6C9C2C4CJC2H6HJH9H2D7DQD9DQH5H3H4DAH8H7H5C4HTHKHTCJS5DKC7S8DKDAD3D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		//"DEAL=NLEWWWWNEEENSSSNSWEENEESSWWWEENSNSNNSESSNWSNNEWSNWENWW;GAME=PAPA1H1S4HPAPAPAAS4S6S3SAD2D6D3DKD7D5DTDQD9H8DJDAH3H5H4D4H2HKH6CQH3C6HJHAC4C7C2CKC5CJC8CQC2S5S9C8SKS9SJS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=NENSESWSWSNEWNSWNNSNWESNEEESWWEENWSNNWEWESNNEEESWNWSSW;GAME=PA1D2C2HPA4H4SX1PA5HPAPAPA3S5SKSAS3H6HQH8H4H3CKH9HJHTH5H5C2D6DJDADAC6C2C4CQS9S4S6S2SJSTS7S7D3DQD5DJC7C8CKCTC8D9CQC;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=SESNWSNSWNNSESWNSWSWNWNENEENEWEEWNWEWENWSWSWEESSESNSEN;GAME=PAPA1D1H1S4HPAPA5CPAPAPA3H7H9HAH3S4SJSKS2H2C6HQH7S2SAS5STCQCKC4C5C8C9C4H3CTD7CAC4DADQD3DJDKD5D6D5H8S8H6C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=NESWWEENSNNSNWENSNEWNNSNSEESEEWSSNSWESWSWWNNEWWWESNEEW;GAME=PA1CPA1SPA2SPA4DPA4SPAPAPA7H2HKHAH2S3SQSTS5S5HAS4S6SJSKS3DKDAD6D2DJHQH7C3H4C9CAC2C5C8CKCTC4H4DTH6H5DJD8S7D9HQC6C8H;CONV=0100010300000001010001000101010101010101010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=NASNWESNESESNWWSESNSNWENNSSWWWWWWNNEENEWSNSESESNEWWNEE;GAME=PAPA1D1HPA2S3D4H5DX1PAPAPAAC3C5C2CKC7C8C6CJSQSKS3SAS5STS2S9S7S4C8STHAH6H7H2DAD5D3DKH8H9H4D6D8DJD9DQCTC9C2H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=ELNSNNSWSNWENSESNSSNESEEWWSNNWNNNWESEEWSWSEEWEWEWEWNWS;GAME=PAPA1SPA4SPAPAPA4HTHKHAH3H5HJH9H3SAS5SQSKDJD3D7D4DQDAD9D2H8H2S7H8C7C2CJCAC3CTC4CTD2DQH6D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=SNEWSENSNESSWWSNWNSSSESENWSEWEEEEENWEWWSSNWNNWENWWNNNS;GAME=1DPA1SPA3CPA4SPA4NPA5CPA5SPAPAPA6HKH2H8HAH9H6C3HAC3C8C2CAS6S2S7STCQC4S5CKS4H5D3SQS9C4C9S2D8D9DQD3DJDAD6DTDKDTS4D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=NENSEESESSSNWSNNSWNNNNWWNWSNENEEESEWSSEWSSWWWNEEWEWNEW;GAME=1DPA2C2S3D3S4D4S5D5SPAPAPA3H2HAH9HTCQCAC4C2C5CKC4S3S6SKS2S7S3CASQSKH2D4H7H4D5D8S3D5HTH9S6D9D7DTSKDQHJHTD8D6H6CQDJD;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=ELNESSNWWNWWESENEWWSWESWNNSEWSWSENSSNSNNNEEENNEEWSWWSE;GAME=1SPAPA2HPA3H3SPAPAPA3H2HQH6H2CQCKC7C5H4HKH3S2SKS9S6S6DTDJDAD4STSJS5SJC6C3C4C8C9CAC5C7S8HQS7HTCTH3DKD4DQD8D9D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=ENENNEWSNWSSWNSWWSNEWSNEWWSENSWEESNWSNNEWESNSNWNSEEEWE;GAME=1SPA2NPA3NPAPAPAQHKH3H4H2S3SKS6S7S8STS5SAS9S3D4SQS4D2D4CJS7C9H9DAD8DJD5D6DKDQD3CTHAH2H5H7D8HTDTC2CAC6C8C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=WNNWNEEWSEENSSSNNSSSSEWEESWSWWWWWNWNNWESWNENSNNNESWEEE;GAME=PAPA1S2D2HPA2S3C4HPAPAPA3D8DAD9DKHAH7HQHJH9H5C4DJS2SQS5SASTS3C7SKS5D7C4STCQC6H2CKD2DTD6D5HTH6C8C4C9CKC4H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=SLWWWWEEENSSESNSNNNNNWSNESSNNEWENWWESEWEWWSSEEWNESSWSN;GAME=1SPA2DPA3DPA4CPA4DPA4SPAPAPA8D3DJDKD3S2SAS5S8S6SKS7SJSQS2H9SAH6H3HTH7H4DKH4STS4H9C5HQD8H5D6C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=EESNESWNENSSNSWNWEESWWSNNWSESWWSENEENSNWWSWESNNWEENWEE;GAME=PAPA1NPA2HPA2SPA3NPA4SPAPAPAJD4D6DQD3S6SKS2S4S5SQS7S8SJSAS2H4CJCAC7CKH7H6H5H4HTH8HJH9D3D2DAD9H2CAHQH3H3C8C5C8DTD5DKD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=SNNENEWSNEWESSNWNWSWSWWSENESWNEEESSWENNWSSSWWSNWNEEENN;GAME=1CPA1SPA1NPA3NPAPAPA8D3DJDADQC6C2C5CKCTC4C3C7C4SAC9C8CJC2S5SKD5D2DQDQS3S8SKSJH4H7H2HQH5H8HKH9H3HTHAH6S4DASJS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=ELSSESNNEWEWSSNSEEENWEWWSSSSWNEEWEWSNWNEEWNNWNENNNWSWS;GAME=PA1DPA1SPA1NPA2SPA4SPAPAPAAH9H6H3H7SQSKS3S5S4S4CASAD7D6D5DKD9DTH4DQDTDQH3DJD2S6S8DAC8CKC9C6CTCQCJC2D2H7C4H2CJS8S5H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		//"DEAL=SENENEESSESSSSSSSNWSWNWWENWNWNNWEEWWENSWSENENWSEWEENNW;GAME=1C1HX1PA2C2DX12H3CPA3HPA4CPAPAPATDQDJD2D2C3CAC7DKC2H4C5CQC5H3S6CJC8H4D9C7S6SQS2SAD4S3D5DJH6HQHKHKD8D8S6D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		//"DEAL=EASEEWSWNWEESWSNEEWNWWSEEESNSWEESNNWSSENNWWNSNWNENNSSW;GAME=PA1NPA2CPA2HPA4HPAPAPA5DADQD9DAH4H2H9HKH5H6H3H4S9SKS7SQS2S6SQHJDKD7D2D5SAS8S3D8D6D4DTHAC5C8C3C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=ENENWWNESSSEEEWENSSWENNSSWSENEWNWWENENNWESNWNSWWWESNSS;GAME=1C1SX1PA3HPA4HPAPAPAJDQD3D2D4C6CQC8C3H2SKH2H5C3CKC9CAD4D6D8DTSKS4S3SAS7S5S8H2CTCAC9D4HJHAH5D7DKD6H9HQHTHTD7H;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-N",
		//"DEAL=ELWWENNESNEWNWENNENNEWESSNNSSWWWWENWWNEEESWSSSNSEWSSSE;GAME=1N3SPAPAPA8DKD4DTD7S9SKS3SQSTS5CAS7DJD3C3DAD6H2D9D2H3HJHQHAH2S4H8H8CKC6C4C;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=ENWEEWENNSENWSNSSWNSNWEWNEWWNSWSSNSWEEESENEWNNEEWWNSSS;GAME=PA1HPA1SPA1NPAPAPA8D5D9D2DQD3DKD7DADJD3S6DTD7C6C3H4D8C7S5HQCJC3CKCAS4S2S8SKS9S5STHQSTS6SJH9C2CAC4CJSQH6H5C;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=ELNESSNWWNWWESENEWWSWESWNNSEWSWSENSSNSNNNEEENNEEWSWWSE;GAME=1SPAPA2HPA3H3SPAPA4H4SPAPAPA3H2HQH6H2C3CKC7C6DTDJDADASTS9S6S2SKSJS5SKD4D2D3D9D5DQD8D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		//"DEAL=WLWSWSNEWENWEESESWSWNESSWWNEEWEWNWNEWSSESSSESNNWNNNNEN;GAME=PA3SX14SPAPAPAKCAC4C6C2S8S9SKSQC3C2CTC7C5CJC6STS4S3S8C6H4HAH7H3DJDKDAD2D9DQD7D3H8HKHJH;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=EAEWENNWWWSNWSNEESSNSWSNSESSEWNESWNEEWENWWNNWNESSWSEEN;GAME=PA1DPA1SPA2DPA3NPAPAPATH6HAH4HJHKH5H8S6D2DAD8DKD7HTD3D4D3C5CQDQH9S3H8H2HJS7C3S9H5D2S6CKS7D5SASAC2CTC8CJC4CKC9C;CONV=0100010300000001010001000101010101010101010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=NEWNEENNSENNEEEWWWSESWEWEWNSSNSWESSENSSSWNEWNENNSWSWNW;GAME=PAPA1H2DX13CPA3DPA3HPA3SPA4D4HX1PAPAPA2CTCQC8C9H2HAH3HAS2S6S9SQSKS3SJSTH6H4H5HKD6D5D4D3C4C7H2DAD3D5S9D7D8D6CJD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=WNNWSNWWEESESESEEEEENNEWWNNWNSSNENESSNWNNESWNWWSWSWSWS;GAME=PA1HPA1SPA2DPA6HPAPAPA2SAS7S5S3HQHAH8HKH6H4H3CKD6D3SAD4S7D2D8STS6S2C8CAC6C5C9C4C7C2HJC8D9D9HTD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=SNSSWWSWNSSESSENEEEEESNWWNWSNSENWNSWEENNSWNWNEWWWESNNE;GAME=1CPA1HPA3CPA3HPA4CPA5CPAPAPAJD9D3DADJS2S3SAS4D8DKD2D9H5HTHAH8H6HQH4HKS6S3H7SQSTS2C4SQC4C8CACJH3C5C2HTDQD5D6CKC7C7HJC;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=SEESSEWWEWNESWSSWNSNNWNENEEWSEESEENWNESWSWESNWNSWWNNNS;GAME=1NPA2HPA2SPA2NPA4SPAPAPA7CTCJCACAS6S5S3S3C6C7S2CKS5C4S2S8H3HQHKH9HTHJHAH2H9CJS4HQS6H8S9S4DTD2D3DKD5D8D6D;CONV=0001010200010101010101010101010101010101010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=WEWSEWNSEEESSEWWNEWSWESSNSSEWNSWNNWWNNESNWESNSENEEWWNN;GAME=PA1HPA2DPA2HPA3HPA3SPA3NPAPAPA2SAS7S4S3DAD6D2D4C7CAC6C5C5SKC3C8CQC2C3H9D5DJD8DKS3S6SJSAHQH4H2H6H4DKH5H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=NLNSNENSWESWSSNSNNSWNWNSWENENSWEWWENSEWSEWSWWNENWEEESE;GAME=PA1S2C2S4C4SPAPAPAKC8C6C5CQCJCAC9C9H5HKH4H3HQH2H8H2S8SJSKSTH6H6SAH3DQD2D6D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		//"DEAL=WLWSWSNEWENWEESESWSWNESSWWNEEWEWNWNEWSSESSSESNNWNNNNEN;GAME=PA3SX14SPAPAPAKC3C4C6CAD3D6D7D8D5D4DKDTC7CAC2C2S8S9SKSQC5C8C6SAS4S3SJD6H2HAH3H9DQD7S2D8HKHJH5H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=SEWWEWSSWSSWSSEEWENESWENESWEWNNWSENSNWNNENSWNEENWNNSES;GAME=1CPA1H1N2CPA2H3D3HPAPAPA6SAS9S2S6H2HKHAHKS3S4S5S7SQS5H8S2C5DAC6CAD7D3DTDJDQDKD3HQH7H9HJH;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=WLWWEWSWSSENEESWNSSWSNSEESNWNWNNNSSNEESWNNNESWENWWEEWE;GAME=PAPA1SPA3S4H4SPAPAPA7H3HAHJHJCKCAC2C8HKH2HTH6S2SQS5S4S4D9S3STS8S7S5D3C4HQC6CJD7DAD3D5C5HTC8C4C9C7C8DQD2DKDTD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=SASENNSENEWWWNSSENSSWSWNNWWSEEEENSENEWSNWNSWSNSNWWEEWE;GAME=PA1NPA2DPA2HPA4HPAPAPAJD3DAD7D2CJCKC3C4C7CACTC6CQC5C9CKD4DJS2D9DTD2H5D3H7HJHKH6H8HQHAH4S2SQS3S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=WENEEWSENSSNNNEWSWWENEWNWNNNNNWSWWESSEESWEWNESWESWESSS;GAME=PA1DPA1SPA2CPA2SPA3CPA3NPAPAPA4H2HJHKHTC5C2CACQH5H6H3H8HTHAH7D7HTD3C9HAS3S4S5SKS7S8C2S3D4DAD6D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		//"DEAL=WAWWSEENNEEESSWNNSSNNSSWWNWNWSNNWWNWWESEENSSEWSEENWESE;GAME=PAPA1SPA1NPA2CPA2HPA4HPAPAPA2S5SKS6S4DJDQDJH8S3SJSTS2H4HKH3HAS4S3C5H8C9CKCAC7H8HAHQHQS7S2C2DJCQC9H7CTD3D5C5DKDAD6C8D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=WNENWEWSNNESWWSENNNNWESEESWWSWEWSENNNEEWSWWEENSSWSSNSN;GAME=1NPAPAX1PAPAPATH4H2HKH5H8HJHAHJS2S6S4STS3SQS5SAS2D7S9S6DTDQDAD7D3DJD9D2C7CKC3CKD4D8D6H3H9HQHJC7H8S4C8C;CONV=0100010300000001010001000101010101010101010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=SNNSSNNNESNSSESEWSWSEEWNSSNEWWWSENNWNNEEEWWWEWNWENSWES;GAME=1CPAPAX12DPA3CPA4CPA5CPAPAPA3H7HQH5H5SAS6S7SAC3D2C8CQD5DTD7D4D9DKDADKC3C2H5CKSJS2STSAH4C4H8HQC9H6C6HJD3STH2D6D4STC8D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		//"DEAL=WESNENSNWEEWWSSSSSSNSNSWWWSNSNEEEWEWNENWESEWWNENEEWWNN;GAME=1CPA1H3DPA4D4H5DPAPAPA7HTHAH2HTCKC8C3C5DTDAD4CAS7S2S5SKS3S2C4S8S9S2DJSKDJD6D9CACJC5C4H6CQC7C5HQD8DTS3D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=WAWNNEEWWENSSNNSESSEWNEWSESSWNSESWNNNWNWWWNEEWWSEEENSS;GAME=PAPAPA1DPA1HPA3DPA4CPA5DPAPAPAAH3H5H4HKH8H4S6H2SQS5S8S8D3DJD7DADTD3C6DKD2C4C9D5D7C9HQDJSAS6S3SQC8CAC5CTC6CJC2H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		"DEAL=WANNWNWNWEWEEESEENWENSWEEESWSSSWSNNWWSESESSWWNENWNSNNS;GAME=PAPA1D1HPA1S2D3S4DPAPA4HPA4SPAPAPAKCAC6C2CAS4S6S7S2S5SKS6D8HAH2H5HQDKDAD4D5D7DTD8DQCJS4C3C3S9SQS2D7HQHKH9HJHTH5C9C6H9D7C3D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=SEEWWSNWNNESWNWNWEEENSNESSSSWWSSEENWESWNWESWEENWESNNNS;GAME=1D1H1SPA2DPA2NPA3SPA3NPAPAPA6H4HAH8HAC6C2C5C7CKCTCJC2D6DAD3DKD3H7D4DQD3C9D5DJD2H8CTD8D4S9C7HAS8S7S2S;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=SNSSWWSWNSSESSENEEEEESNWWNWSNSENWNSWEENNSWNWNEWWWESNNE;GAME=2CPA2DPA3CPA3HPA4HPA4NPAPAPA6D8DKD2DJD9D3DAD3H9HQH4HKHTH8H6H5S6SJS2SAH4C2HJHTC5C8CJCAC2C7C3SAS3C4SQS;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-N",
		"DEAL=ENSNENENWNWNNNWSSWWEWSEEESSSSWESSEENENWWNNESWNSWWENWES;GAME=PA1DPA2CPA2DPA3NPAPAPA4H2HQH9HKHAH8H5HKC6C2CAC3HJH7H6HQC4C4S8CJC3S7STC9CTS2D8S7CKS3D4D5C6D8D5D3C9DQD7D;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-S",
		//"DEAL=NLWSEEENEWNSESSNNNWENWSWEWWWNWNESWNNESSWWENESNSESWESSN;GAME=PAPA1C1DPAPA1S2HPAPA2S3C4SPAPA5DPAPAPATCQCKC2CJC9C7C4CQSTS6S2SKS8D3S4SKH4H5H6HAH2HTHJH7H8H6DQH8S5S5DAS3H9HJD9D;CONV=0001010200010101010101010101010101010101010100;OPTIONS=00000100;TYPE=2;1-W",
		"DEAL=NEESNWWNSENSSEENWSWNSNNNWSWNEWWEESNESEENSNWWNEWESWSEWS;GAME=PA1HPA1SPA2CPA2HPAPAPA4DJDAD2HQH7H3HKH8H9HTH4HAH5C4C6HQC6CTCACJH7D3D7C8SAS3S5S3C4S2D9CKC8C5D6D6S9SKS2SKD8D2CQD;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=ENWWNWSNNSESWENSSWENNSNEENESEEWENNEWSWESWSWWNNWESSNWES;GAME=1HPA3HPAPAPAAD4D7D5D2D2CQDKD2HTHJH7HQS5S8SASJC3CACTC6SKS2S3S3HKHAH6H;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=WASNNWSWSWNEEEWNEESSSWSEEWNNWNSENSNESSWNSWWESNNEWEWNEW;GAME=1SPA3SPAPAPAAD3D5D8DKD4D6DQDKH5H4H2H2DTD7D5C4S5SAS7S2S6SKS2CJD9DQHQS3H9HAH3S7C3CJC6CKC8C9C4CQC7HACTC;CONV=0001000300010000000000000000000000000000000000;OPTIONS=00000100;TYPE=2;1-E",
		"DEAL=WASSNSEWESEEWSEWSEENWEWWWWWENNESWNEWNNWWSNSNEENSSSNNNS;GAME=1D1SPA4S5D5S6DX1PAPAPAKS5S3S2D7D6D4D3D7C4CTCKCAH6H2H4H5HKH3H8HQC2S6C2C9H7H5D8S;CONV=0001000100010101000001000200010001000001010100;OPTIONS=00000100;TYPE=2;1-W",
		};
		for (int i = 0; i < testDataNoClaim.length; i++) {
			String[] temp = testDataNoClaim[i].split(";");
			String deal = temp[0].substring("DEAL=".length());
			String game = temp[1].substring("GAME=".length());
			String bids = game.substring(0, game.lastIndexOf("PAPAPA")+6);
			String cards = game.substring(game.lastIndexOf("PAPAPA")+6);
			char win = temp[5].charAt(2);
			BridgeGame bg = BridgeGame.create(deal.substring(2), deal.charAt(0), deal.charAt(1), bids, cards);
			int res = 0;
			if(win == GameBridgeRule.getWinnerBids(bg.bidPlayed) || win == GameBridgeRule.getPositionPartenaire(GameBridgeRule.getWinnerBids(bg.bidPlayed)))
			{
				res = GameBridgeRule.getRemainingCards(bg.distribution, bg.cardPlayed).size()/4;
			}
			else
			{
				res = 0;
			}
			System.out.println("Declarer : "+GameBridgeRule.getWinnerBids(bg.bidPlayed));
			System.out.println("Contrat : "+GameBridgeRule.getHigherBid(bg.bidPlayed));
			System.out.println("Nombre de cartes restantes : "+GameBridgeRule.getRemainingCards(bg.distribution, bg.cardPlayed).size()/4);
			System.out.println("Fait tout : "+win);
			int n = 0;
			try {
				n = GameClaimThomas.getTotalNbTricks(bg);
			} catch (GameClaimException e) {
				e.printStackTrace();
			}
			System.out.println("Nb calcul : "+n);
			
			
			
			if (res != n) {
				System.out.println("PB at index="+i+" - bg="+bg);
			}
			assertEquals(res,n);
		}
	}
	
	public void testMoreCase() {
		String deal="ELNEEEEEEEEESSSWSNNNWSNSEWWSWNNWSWNNNWSSNWNSEESSWEWWNW";
		String bids="PA1D1SX12SX1PA4HPAPAPA";
		String cards="5S4SASKS2S3STS7S3CAC7H2C9S3H6S8S4H4CKH2HQH5H8H5C6HJHAH6C";
		BridgeGame bg = BridgeGame.create(deal.substring(2), deal.charAt(0), deal.charAt(1), bids, cards);
		int n = 0;
		try {
			n = GameClaimThomas.getTotalNbTricks(bg);
		} catch (GameClaimException e) {
			e.printStackTrace();
		}
		assertEquals(5, n);
	}

    public void checkClaimFile(String resourceFile, boolean doAssert) {
        try {
            System.out.println("Test claim for file="+resourceFile);
            File f = new File(getClass().getClassLoader().getResource(resourceFile).getFile());
            BridgeGame bg = PBNConvertion.PBNToGame(f);
            assertNotNull(bg);
            int nbTricksResult = Integer.parseInt(bg.getResult());
            int nbTricksForDeclarer = GameBridgeRule.getNbTrickForDeclarer(bg.getCardList(), bg.getContract());
            int nbTricksClaim = GameClaimThomas.getTotalNbTricks(bg);
            System.out.println("Check claim for file="+resourceFile+" - nbTricksResult="+nbTricksResult+" - nbTricksForDeclarer="+nbTricksForDeclarer+" - nbTricksClaim="+nbTricksClaim);
            if (doAssert) {
                assertEquals(nbTricksResult, nbTricksClaim + nbTricksForDeclarer);
            }
        } catch (Exception e) {
            System.out.println("Exception : "+e);
            if (doAssert) {
                assertTrue(false);
            }
        }
    }

    public void testClaimAllFile() {
        String[] tabFile = new String[] {"revendiquer2.pbn", /*"revendiquer3.pbn",*/ "revendiquer4.pbn", "revendiquer5.pbn", "revendiquer6.pbn", "revendiquer7.pbn", "revendiquer8.pbn", "revendiquer9.pbn",
                "revendiquer10.pbn", "revendiquer11.pbn", "revendiquer12.pbn", "revendiquer13.pbn", "revendiquer14.pbn", "revendiquer15.pbn", /*"revendiquer16.pbn",*/ "revendiquer17.pbn", "revendiquer18.pbn", "revendiquer19.pbn",
                "revendiquer20.pbn", "revendiquer21.pbn", "revendiquer22.pbn", "revendiquer23.pbn", "revendiquer24.pbn", "revendiquer25.pbn", /*"revendiquer26.pbn",*/ "revendiquer27.pbn", "revendiquer28.pbn", "revendiquer29.pbn",
                "revendiquer30.pbn", /*"revendiquer31.pbn",*/ "revendiquer32.pbn", "revendiquer33.pbn", "revendiquer34.pbn", /*"revendiquer35.pbn",*/ "revendiquer36.pbn", "revendiquer37.pbn", "revendiquer38.pbn"};
        for (String claimFile : tabFile) {
            checkClaimFile(claimFile, true);
        }
    }

    public void testClaimProblem() {
        String[] tabFile = new String[] {"revendiquer3.pbn","revendiquer16.pbn","revendiquer26.pbn","revendiquer31.pbn","revendiquer35.pbn"};
        for (String claimFile : tabFile) {
            checkClaimFile(claimFile, false);
        }
    }


	
//	public void testClaimJR1() {
//		String pbn = "testClaim-JR1.pbn";
//		int nbExpected = 5;
//		System.out.println("Check pbn : "+pbn+" - expected "+nbExpected);
//		BridgeGame bg = PBNConvertion.PBNToGame(new File("/Users/pserent/temp/pbn/"+pbn));
//		assertNotNull(bg);
//		try {
//			assertEquals(nbExpected, GameClaimThomas.getTotalNbTricks(bg));
//		} catch (GameClaimThomasException e) {
//			e.printStackTrace();
//		}
//		System.out.println("Success !");
//	}
//
//	public void testClaimJR2() {
//		String pbn = "testClaim-JR2.pbn";
//		int nbExpected = 3;
//		System.out.println("Check pbn : "+pbn+" - expected "+nbExpected);
//		BridgeGame bg = PBNConvertion.PBNToGame(new File("/Users/pserent/temp/pbn/"+pbn));
//		assertNotNull(bg);
//		try {
//			assertEquals(nbExpected, GameClaimThomas.getTotalNbTricks(bg));
//		} catch (GameClaimThomasException e) {
//			e.printStackTrace();
//		}
//		System.out.println("Success !");
//	}
//
//	public void testClaimJR3() {
//		String pbn = "testClaim-JR3.pbn";
//		int nbExpected = 4;
//		System.out.println("Check pbn : "+pbn+" - expected "+nbExpected);
//		BridgeGame bg = PBNConvertion.PBNToGame(new File("/Users/pserent/temp/pbn/"+pbn));
//		assertNotNull(bg);
//		try {
//			assertEquals(nbExpected, GameClaimThomas.getTotalNbTricks(bg));
//		} catch (GameClaimThomasException e) {
//			e.printStackTrace();
//		}
//		System.out.println("Success !");
//	}
//
//	public void testClaimJR4() {
//		String pbn = "testClaim-JR4.pbn";
//		int nbExpected = 5;
//		System.out.println("Check pbn : "+pbn+" - expected "+nbExpected);
//		BridgeGame bg = PBNConvertion.PBNToGame(new File("/Users/pserent/temp/pbn/"+pbn));
//		assertNotNull(bg);
//		try {
//			assertEquals(nbExpected, GameClaimThomas.getTotalNbTricks(bg));
//		} catch (GameClaimThomasException e) {
//			e.printStackTrace();
//		}
//		System.out.println("Success !");
//	}
//
//	public void testClaimJR5() {
//		String pbn = "testClaim-JR5.pbn";
//		int nbExpected = 7;
//		System.out.println("Check pbn : "+pbn+" - expected "+nbExpected);
//		BridgeGame bg = PBNConvertion.PBNToGame(new File("/Users/pserent/temp/pbn/"+pbn));
//		assertNotNull(bg);
//		try {
//			assertEquals(nbExpected, GameClaimThomas.getTotalNbTricks(bg));
//		} catch (GameClaimThomasException e) {
//			e.printStackTrace();
//		}
//		System.out.println("Success !");
//	}
//
//	public void testClaimJR6() {
//		String pbn = "testClaim-JR6.pbn";
//		int nbExpected = 8;
//		System.out.println("Check pbn : "+pbn+" - expected "+nbExpected);
//		BridgeGame bg = PBNConvertion.PBNToGame(new File("/Users/pserent/temp/pbn/"+pbn));
//		assertNotNull(bg);
//		try {
//			assertEquals(nbExpected, GameClaimThomas.getTotalNbTricks(bg));
//		} catch (GameClaimThomasException e) {
//			e.printStackTrace();
//		}
//		System.out.println("Success !");
//	}
//
//	public void testClaimJRTour1049338deal2() {
//		String pbn = "JRTour1049338deal2.pbn";
//		int nbExpected = 4;
//		System.out.println("Check pbn : "+pbn+" - expected "+nbExpected);
//		BridgeGame bg = PBNConvertion.PBNToGame(new File("/Users/pserent/temp/pbn/"+pbn));
//		assertNotNull(bg);
//		try {
//			assertEquals(nbExpected, GameClaimThomas.getTotalNbTricks(bg));
//		} catch (GameClaimThomasException e) {
//			e.printStackTrace();
//		}
//		System.out.println("Success !");
//	}
}
